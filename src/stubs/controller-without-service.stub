<?php

namespace App\Http\Controllers;

use App\Http\Controllers\Controller;
use App\Http\Requests\{{ model }}Request;
use App\Http\Resources\{{ model }}\{{ model }}Collection;
use App\Http\Resources\{{ model }}\{{ model }}Resource;
use App\Models\{{ model }};
{{ relationImports }}use App\Traits\ApiResponseTrait;
use Illuminate\Http\Request;
use Illuminate\Routing\Controllers\HasMiddleware;
use Illuminate\Routing\Controllers\Middleware;
use Illuminate\Support\Facades\DB;

class {{ class }} extends Controller implements HasMiddleware
{
    use ApiResponseTrait;

    public static function middleware(): array
    {
        $model = '{{ route }}';

        return [
            'auth',
            new Middleware(["permission:view_$model"], only: ['index']),
            new Middleware(["permission:show_$model"], only: ['show']),
            new Middleware(["permission:create_$model"], only: ['store']),
            new Middleware(["permission:update_$model"], only: ['update']),
            new Middleware(["permission:delete_$model"], only: ['destroy']),
        ];
    }

    public function index(): \Illuminate\Http\JsonResponse
    {
        $data = {{ model }}::paginate(15);

        return $this->success('{{ modelPlural }} retrieved successfully', {{ model }}Collection::make($data));
    }

    public function store({{ model }}Request $request): \Illuminate\Http\JsonResponse
    {
        try {
            DB::beginTransaction();

            $validatedData = $request->validated();

            $model = new {{ model }};
            $model->fill($validatedData);
            $model->save();

            DB::commit();
            return $this->success('{{ model }} created successfully', new {{ model }}Resource($model->fresh()));
        } catch (\Exception $e) {
            DB::rollBack();
            return $this->failure('{{ model }} creation failed', 500, $e->getMessage());
        }
    }

    public function show({{ model }} ${{ variable }}): \Illuminate\Http\JsonResponse
    {
        return $this->success('{{ model }} retrieved successfully', new {{ model }}Resource(${{ variable }}));
    }

    public function update({{ model }}Request $request, {{ model }} ${{ variable }}): \Illuminate\Http\JsonResponse
    {
        try {
            DB::beginTransaction();

            $validatedData = $request->validated();

            ${{ variable }}->fill($validatedData);
            ${{ variable }}->save();

            DB::commit();
            return $this->success('{{ model }} updated successfully', new {{ model }}Resource(${{ variable }}->fresh()));
        } catch (\Exception $e) {
            DB::rollBack();
            return $this->failure('{{ model }} update failed', 500, $e->getMessage());
        }
    }

     public function destroy({{ model }} ${{ variable }}): \Illuminate\Http\JsonResponse
    {
        try {
             ${{ variable }}->delete();

            return $this->success('{{ model }} deleted successfully');
        } catch (\Exception $e) {
            return $this->failure('{{ model }} deletion failed', 500, $e->getMessage());
        }
    }
}
